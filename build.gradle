plugins {
    id 'org.springframework.boot' version '3.2.0'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'java'
    id 'jacoco'
}

group = 'com.lithespeed'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // Spring Boot starters
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    
    // Database
    runtimeOnly 'org.postgresql:postgresql'
    runtimeOnly 'com.h2database:h2'
    
    // Flyway
    implementation 'org.flywaydb:flyway-core'
    
    // AWS S3
    implementation platform('software.amazon.awssdk:bom:2.21.29')
    implementation 'software.amazon.awssdk:s3'
    
    // Swagger/OpenAPI for API documentation
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'
    
    // WireMock for service virtualization
    testImplementation 'com.github.tomakehurst:wiremock-jre8-standalone:2.35.1'
    
    // Development tools
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    
    // Testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.testcontainers:postgresql'
    testImplementation 'org.testcontainers:junit-jupiter'
    
    // Karate for API testing
    testImplementation 'com.intuit.karate:karate-junit5:1.4.1'
}

tasks.named('test') {
    useJUnitPlatform {
        excludeTags 'integration'
    }
    finalizedBy jacocoTestReport
    jvmArgs '--add-opens', 'java.base/java.lang=ALL-UNNAMED'
    jvmArgs '--add-opens', 'java.base/java.util=ALL-UNNAMED'
    systemProperty 'file.encoding', 'UTF-8'
    
    // Exclude problematic test classes that require Docker
    exclude '**/karate/**'
    exclude '**/integration/**'
}

jacoco {
    toolVersion = "0.8.10"
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
        csv.required = false
    }
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.80
            }
        }
    }
}

check.dependsOn jacocoTestCoverageVerification

// Integration tests using Karate CLI (aligned with org's intTest pattern)
task integrationTest() {
    description = 'Run integration tests using Karate CLI with WireMock service virtualization'
    group = 'verification'
    dependsOn assemble, testClasses
    
    doFirst {
        def karateOutputDir = 'build/karate-reports'
        project.ext.karateOutputDir = karateOutputDir
        
        // Environment configuration (following org pattern)
        def userHost = System.getenv('USERHOST') ?: 'localhost'
        def baseUrl = System.getenv("BASE_URL") ?: "http://${userHost}:8080"
        def wireMockPort = System.getenv("WIREMOCK_PORT") ?: "9999"
        
        // Start WireMock server for service virtualization
        println "Starting WireMock server on port ${wireMockPort} for service virtualization..."
        
        javaexec {
            main = 'com.intuit.karate.cli.Main'
            classpath = sourceSets.test.runtimeClasspath
            args = [
                'classpath:com/lithespeed/hellojava06/karate', 
                '-t', '@integration',  // Run tests tagged with @integration
                '-o', karateOutputDir,
                '--threads', '1'  // Single thread for WireMock compatibility
            ]
            systemProperties = [
                'baseUrl': baseUrl,
                'wireMock.port': wireMockPort,
                'spring.profiles.active': 'integration',
                'file.encoding': 'UTF-8'
            ]
            jvmArgs = [
                '--add-opens', 'java.base/java.lang=ALL-UNNAMED',
                '--add-opens', 'java.base/java.util=ALL-UNNAMED'
            ]
        }
    }
    
    shouldRunAfter test
    finalizedBy jacocoTestReport
}

// Your org's proven intTest pattern - simplified and working
task intTest() {
    description = 'Integration tests using org CLI pattern (requires running app)'
    group = 'verification'
    dependsOn assemble, testClasses
    
    doFirst {
        def karateOutputDir = 'build/inttest-reports'
        project.ext.karateOutputDir = karateOutputDir
        
        // Following org's environment pattern
        def userHost = System.getenv('USERHOST') ?: 'localhost'
        def baseUrl = System.getenv("SOME_URL") ?: "http://${userHost}:8080"
        
        println "Running intTest with baseUrl: ${baseUrl}"
        println "NOTE: Ensure application is running on the target URL before executing this test"
        
        javaexec {
            main = 'com.intuit.karate.cli.Main'
            classpath = sourceSets.test.runtimeClasspath
            args = [
                'classpath:com/lithespeed/hellojava06/karate',
                '-t', '@karate',  // Following org's tag pattern
                '-o', karateOutputDir,
                '--threads', '1'
            ]
            systemProperties = [
                'baseUrl': baseUrl,
                'karate.env': 'dev',  // Use dev environment 
                'karate.server.port': baseUrl.split(':')[2] ?: '8080'  // Extract port from URL
            ]
            jvmArgs = [
                '--add-opens', 'java.base/java.lang=ALL-UNNAMED',
                '--add-opens', 'java.base/java.util=ALL-UNNAMED'
            ]
        }
    }
}


// Unit tests only (no Docker required)
task unitTest(type: Test) {
    description = 'Run unit tests only (no Docker required)'
    group = 'verification'
    useJUnitPlatform()
    
    include '**/*Test.class'
    exclude '**/integration/**'
    exclude '**/karate/**'
    
    systemProperty 'spring.profiles.active', 'test'
    
    jvmArgs '--add-opens', 'java.base/java.lang=ALL-UNNAMED'
    jvmArgs '--add-opens', 'java.base/java.util=ALL-UNNAMED'
    systemProperty 'file.encoding', 'UTF-8'
}

// S3-specific tests (now handled by Karate API tests)
task s3Test(type: Test) {
    description = 'Run S3-specific tests via Karate API testing'
    group = 'verification'
    useJUnitPlatform()
    
    include '**/karate/**'
    
    systemProperty 'spring.profiles.active', 'test'
    
    jvmArgs '--add-opens', 'java.base/java.lang=ALL-UNNAMED'
    jvmArgs '--add-opens', 'java.base/java.util=ALL-UNNAMED'
    systemProperty 'file.encoding', 'UTF-8'
}

// DEV Integration tests with WireMock service virtualization  
task devIntegrationTest(type: Test) {
    description = 'Run integration tests with WireMock S3 service virtualization for DEV/INT environments'
    group = 'verification'
    useJUnitPlatform()
    
    include '**/karate/DevIntegrationTestRunner.class'
    
    systemProperty 'spring.profiles.active', 'fake-s3'
    
    jvmArgs '--add-opens', 'java.base/java.lang=ALL-UNNAMED'
    jvmArgs '--add-opens', 'java.base/java.util=ALL-UNNAMED'
    systemProperty 'file.encoding', 'UTF-8'
    
    shouldRunAfter test
}

// PREPROD Integration tests with real AWS S3
task preprodIntegrationTest(type: Test) {
    description = 'Run integration tests with real AWS S3 for PREPROD environment'
    group = 'verification'
    useJUnitPlatform()
    
    include '**/karate/PreprodIntegrationTestRunner.class'
    
    systemProperty 'spring.profiles.active', 'preprod'
    systemProperty 'FLYWAY_ENABLED', 'false'  // Disable DB for API testing
    
    jvmArgs '--add-opens', 'java.base/java.lang=ALL-UNNAMED'
    jvmArgs '--add-opens', 'java.base/java.util=ALL-UNNAMED'
    systemProperty 'file.encoding', 'UTF-8'
    
    shouldRunAfter test
}

// WireMock Integration tests with service virtualization
task wireMockIntegrationTest(type: Test) {
    description = 'Run integration tests with WireMock service virtualization for external dependencies'
    group = 'verification'
    useJUnitPlatform()
    
    include '**/karate/WireMockIntegrationTestRunner.class'
    
    systemProperty 'spring.profiles.active', 'fake-s3,wiremock'
    systemProperty 'wiremock.port', '9999'
    
    jvmArgs '--add-opens', 'java.base/java.lang=ALL-UNNAMED'
    jvmArgs '--add-opens', 'java.base/java.util=ALL-UNNAMED'
    systemProperty 'file.encoding', 'UTF-8'
    
    shouldRunAfter test
}

wrapper {
    gradleVersion = '8.5'
}
