plugins {
    id 'org.springframework.boot' version '3.2.0'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'java'
    id 'jacoco'
}

group = 'com.lithespeed'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // Spring Boot starters
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    
    // Database
    runtimeOnly 'org.postgresql:postgresql'
    runtimeOnly 'com.h2database:h2'
    
    // Flyway
    implementation 'org.flywaydb:flyway-core'
    
    // AWS S3
    implementation platform('software.amazon.awssdk:bom:2.21.29')
    implementation 'software.amazon.awssdk:s3'
    
    // Swagger/OpenAPI for API documentation
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'
    
    // WireMock for service virtualization (better alternative to Mountebank for Java)
    testImplementation 'com.github.tomakehurst:wiremock-jre8:2.35.1'
    
    // Development tools
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    
    // Testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.testcontainers:postgresql'
    testImplementation 'org.testcontainers:junit-jupiter'
    
    // Karate for API testing
    testImplementation 'com.intuit.karate:karate-junit5:1.4.1'
}

tasks.named('test') {
    useJUnitPlatform {
        excludeTags 'integration'
    }
    finalizedBy jacocoTestReport
    jvmArgs '--add-opens', 'java.base/java.lang=ALL-UNNAMED'
    jvmArgs '--add-opens', 'java.base/java.util=ALL-UNNAMED'
    systemProperty 'file.encoding', 'UTF-8'
    
    // Exclude problematic test classes that require Docker
    exclude '**/karate/**'
    exclude '**/integration/**'
}

jacoco {
    toolVersion = "0.8.10"
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
        csv.required = false
    }
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.80
            }
        }
    }
}

check.dependsOn jacocoTestCoverageVerification

// Integration tests that require Docker or external services
task integrationTest(type: Test) {
    description = 'Run integration tests that require Docker or external services'
    group = 'verification'
    useJUnitPlatform()
    
    include '**/karate/**'
    include '**/integration/**'
    
    jvmArgs '--add-opens', 'java.base/java.lang=ALL-UNNAMED'
    jvmArgs '--add-opens', 'java.base/java.util=ALL-UNNAMED'
    systemProperty 'file.encoding', 'UTF-8'
    systemProperty 'spring.profiles.active', 'mountebank'
    
    shouldRunAfter test
    finalizedBy jacocoTestReport
}

// Unit tests only (no Docker required)
task unitTest(type: Test) {
    description = 'Run unit tests only (no Docker required)'
    group = 'verification'
    useJUnitPlatform()
    
    include '**/*Test.class'
    exclude '**/integration/**'
    exclude '**/karate/**'
    
    systemProperty 'spring.profiles.active', 'test'
    
    jvmArgs '--add-opens', 'java.base/java.lang=ALL-UNNAMED'
    jvmArgs '--add-opens', 'java.base/java.util=ALL-UNNAMED'
    systemProperty 'file.encoding', 'UTF-8'
}

// S3-specific tests with Mountebank
task s3Test(type: Test) {
    description = 'Run S3-specific tests with Mountebank service virtualization'
    group = 'verification'
    useJUnitPlatform()
    
    include '**/S3*Test.class'
    include '**/integration/S3*Test.class'
    include '**/karate/**/s3*.class'
    
    systemProperty 'spring.profiles.active', 'mountebank'
    
    jvmArgs '--add-opens', 'java.base/java.lang=ALL-UNNAMED'
    jvmArgs '--add-opens', 'java.base/java.util=ALL-UNNAMED'
    systemProperty 'file.encoding', 'UTF-8'
}

// Karate API tests
task karateTest(type: Test) {
    description = 'Run Karate API tests'
    group = 'verification'
    useJUnitPlatform()
    
    include '**/karate/**'
    
    systemProperty 'spring.profiles.active', 'mountebank'
    systemProperty 'karate.options', '--tags ~@ignore'
    
    jvmArgs '--add-opens', 'java.base/java.lang=ALL-UNNAMED'
    jvmArgs '--add-opens', 'java.base/java.util=ALL-UNNAMED'
    systemProperty 'file.encoding', 'UTF-8'
}

wrapper {
    gradleVersion = '8.5'
}
