# Enterprise Production Configuration
spring:
  application:
    name: ${APP_NAME:hellojava06}
  
  # Database Configuration - Fully externalized
  datasource:
    url: ${DATABASE_URL:jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:hellojava06}}
    driver-class-name: ${DB_DRIVER:org.postgresql.Driver}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    
    # Connection pool settings for enterprise workloads
    hikari:
      maximum-pool-size: ${DB_POOL_MAX_SIZE:20}
      minimum-idle: ${DB_POOL_MIN_IDLE:5}
      connection-timeout: ${DB_CONNECTION_TIMEOUT:30000}
      idle-timeout: ${DB_IDLE_TIMEOUT:600000}
      max-lifetime: ${DB_MAX_LIFETIME:1800000}
      leak-detection-threshold: ${DB_LEAK_DETECTION_THRESHOLD:60000}
    
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: ${JPA_SHOW_SQL:false}
    properties:
      hibernate:
        dialect: ${JPA_DIALECT:org.hibernate.dialect.PostgreSQLDialect}
        jdbc:
          batch_size: ${JPA_BATCH_SIZE:20}
        order_inserts: true
        order_updates: true
        
  # Flyway Configuration
  flyway:
    baseline-on-migrate: ${FLYWAY_BASELINE_ON_MIGRATE:true}
    validate-on-migrate: ${FLYWAY_VALIDATE_ON_MIGRATE:true}
    locations: ${FLYWAY_LOCATIONS:classpath:db/migration}
    
# AWS S3 Configuration - Enterprise ready
aws:
  s3:
    bucket-name: ${S3_BUCKET_NAME}
    region: ${AWS_REGION:us-east-1}
    # No hardcoded credentials - use IAM roles or external credential providers
    access-key: ${AWS_ACCESS_KEY_ID:}
    secret-key: ${AWS_SECRET_ACCESS_KEY:}
    endpoint-url: ${AWS_S3_ENDPOINT_URL:}
    
    # Enterprise S3 settings
    connection-timeout: ${S3_CONNECTION_TIMEOUT:10000}
    socket-timeout: ${S3_SOCKET_TIMEOUT:50000}
    max-connections: ${S3_MAX_CONNECTIONS:50}
    max-error-retry: ${S3_MAX_RETRY:3}

# Server Configuration
server:
  port: ${SERVER_PORT:8080}
  servlet:
    context-path: ${SERVER_CONTEXT_PATH:}
  compression:
    enabled: ${SERVER_COMPRESSION_ENABLED:true}
  http2:
    enabled: ${SERVER_HTTP2_ENABLED:true}
    
# Management and Monitoring - Enterprise grade
management:
  server:
    port: ${MANAGEMENT_PORT:8081}
  endpoints:
    web:
      exposure:
        include: ${MANAGEMENT_ENDPOINTS:health,info,metrics,prometheus}
      base-path: ${MANAGEMENT_BASE_PATH:/actuator}
  endpoint:
    health:
      show-details: ${HEALTH_SHOW_DETAILS:when-authorized}
      show-components: ${HEALTH_SHOW_COMPONENTS:when-authorized}
    metrics:
      enabled: ${METRICS_ENABLED:true}
    prometheus:
      enabled: ${PROMETHEUS_ENABLED:true}
  health:
    db:
      enabled: ${HEALTH_DB_ENABLED:true}
    defaults:
      enabled: ${HEALTH_DEFAULTS_ENABLED:true}

# Logging Configuration
logging:
  level:
    com.lithespeed: ${LOG_LEVEL_APP:INFO}
    org.springframework: ${LOG_LEVEL_SPRING:WARN}
    org.hibernate: ${LOG_LEVEL_HIBERNATE:WARN}
    software.amazon.awssdk: ${LOG_LEVEL_AWS:WARN}
    root: ${LOG_LEVEL_ROOT:WARN}
  pattern:
    console: "${LOGGING_PATTERN_CONSOLE:%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}"
    file: "${LOGGING_PATTERN_FILE:%d{yyyy-MM-dd HH:mm:ss.SSS} ${LOG_LEVEL_PATTERN:-%5p} ${PID:- } --- [%t] %-40.40logger{39} : %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}"
  file:
    name: ${LOGGING_FILE_NAME:}
    
# Security Configuration
security:
  require-ssl: ${SECURITY_REQUIRE_SSL:false}
  
# Application-specific enterprise settings
app:
  cors:
    allowed-origins: ${CORS_ALLOWED_ORIGINS:}
    allowed-methods: ${CORS_ALLOWED_METHODS:GET,POST,PUT,DELETE,OPTIONS}
    allowed-headers: ${CORS_ALLOWED_HEADERS:*}
    exposed-headers: ${CORS_EXPOSED_HEADERS:}
    allow-credentials: ${CORS_ALLOW_CREDENTIALS:false}
    max-age: ${CORS_MAX_AGE:3600}
